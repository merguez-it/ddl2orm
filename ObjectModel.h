/*
 *  ObjectModel.h
 *  ddl2orm
 *
 *  The model that instantiates a SQL (Coco) parser, 
 *  store the parsed tables descriptions as a full Object Model (Describing Classes, attributes, associations, roles...) .
 *
 *  Created by Mathias Franck on 13/03/12.
 *  Copyleft 2012 Merguez-IT. All rights reserved.
 *
 */
#ifndef OBJECT_MODEL_H
#define OBJECT_MODEL_H 

#include <stdlib.h>
#include <map>
#include <wchar.h>
#include "MAppingUtils.h"
#include "MappedTable.h"

using namespace std;


typedef map<wstring,MappedTable,case_insensistive_compare> MappedTables;

// Coco parser generated by 
class Parser;

class ObjectModel  {
	
public:
	ObjectModel(const string& sqlFile, const string& anOutputDir);
	int parseDDLtoObjectModel();
  	const MappedTables& mapped_tables() const {return tables;}
  	MappedTables pure_associations_tables() const ;
private:
	
	friend class OrmGenerator;
  
  // Given an table, populates the MappedTables matching the end of each "to-one" associations, with the "reversed"  member-specification
  // used to navigate the association from it's other end.
	void populateReversedToOne(MappedTable& mt);
  
  // Given an association (i.e: "many-to-many" link table, even n-ary with n>2),
  // populates MappedTables matching the ends of the association with member-specification
  // used to navigate that association from either of its class-ends.
  // Pre-cond: All tables have been mapped to respective classes, some of them representing "many-to-many" relationships.
  // 		     "association" param is assumed to be one of them (i.e: table made only of 2 FKs) .
	void populateManyToMany(MappedTable& relation);
  
	// Analyzes all mapped tables to produce any accessors for "ONE_TO_MANY" and "MANY_TO_MANY" associations.
  void populateRelationships();

	friend class Parser;
	Parser *parser;
	string outputDir;
	MappedTables tables;
};

#endif