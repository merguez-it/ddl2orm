#include <iostream>
#include <fstream>
#include <assert.h>
#include "MappedTable.h"
#include "MappingUtils.h"
#include "ObjectModel.h"

using namespace std;


COMPILER ddl2cpp

		ObjectModel *model;

/*--------------------------------------------------------------------------*/
// IGNORECASE si case sensitive, alors le parser ne sait pas distinguer date (identifier) de DATE (type). shit !

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzéàèçùô".
  digit = "0123456789".
  quote='\''.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  identifier  = ['"']letter {letter | digit | '_'}['"'].
  number = digit {digit}.
  comparator = ">=" | '>' | '<' | "<=" | '=' | "==".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf
COMMENTS FROM "--" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/*------------------------------------------------------------------------*/
ddl2cpp= {
   ("DROP"{ANY} ';') |	
   ("PRAGMA"{ANY} ';') |
   ("CREATE" ((["UNIQUE"] "INDEX" {ANY} ';') | ("TABLE" TableSpec)))
}
.	
TableSpec						
= 
(identifier							(. MappedTable mt; mt.tableName=trimQuotes(t->val);	.)
'('
	TableItemSpec<mt> 
	{[','] TableItemSpec<mt>}
 ')'[';']							(. 	mt.className=camelize(mt.tableName);	.)
									(.	model->tables[mt.className]=mt;			.)
)
.
TableItemSpec<MappedTable& mt>		(. wstring fieldName; wstring typeDecl;		.)
=   (identifier						(. fieldName=trimQuotes(t->val);			.)		
	TypeSpec<typeDecl>								
	ValueSpec<typeDecl>
	[CheckSpec]
   )													(. mt.fieldMap[fieldName]=typeDecl;	.)
 | (("PRIMARY"|"primary")("KEY"|"key")'(' identifier	(. mt.primaryKey=trimQuotes(t->val);	.)
	{','identifier										(. mt.primaryKey=L""; /* ignore composite PK  */	.)
	}')' )						
| ("FOREIGN" "KEY" '(' identifier	(. wstring role=trimQuotes(t->val), column=trimQuotes(t->val);			.)
									(. replaceAll(L"Id",L"",role);	/* Vire "Id" du rôle-objet navigable */ .) 
	')' "REFERENCES" identifier		(. mt.fieldMap[role]=camelize(trimQuotes(t->val));	.) 
   '(' identifier					(. mt.fkToPk[column]=trimQuotes(t->val);									.)
	')'
   )											
.
TypeSpec<wstring &typeDecl> =							(. typeDecl=L"What_The_Fuck";		.)
	("BOOLEAN")											(. typeDecl=L"auto_ptr<bool>";		.)
|	("INTEGER" | "INT" | "int")							(. typeDecl=L"auto_ptr<long>";		.)
|	("TINYINT"											(. typeDecl=L"auto_ptr<char>";		.)
	|"SMALLINT"											(. typeDecl=L"auto_ptr<short>";		.)
	)							
|	("TEXT"|"CHAR" '('number')' 
	 | ("VARCHAR"|"varchar")'('number')')				(. typeDecl=L"auto_ptr<string>";	.)
|	("DOUBLE"|"BIG" "DECIMAL"|
	 "DECIMAL"'('number [','number]')'					
	)													(. typeDecl=L"auto_ptr<double>";	.)
|	("DATE")											(. typeDecl=L"auto_ptr<string>";	.)
.
ValueSpec<wstring &typeDecl>
= [(("NOT"|"not") ("NULL"|"null"))						(. replaceAll(L"auto_ptr<",L"",typeDecl);	.)
														(. replaceAll(L">",L"",typeDecl);			.)
 | ("NULL"|"null")]
 [ ("DEFAULT"|"default") Value]
.

CheckSpec
= "CHECK" '('
	CheckCondition
 ')'
.
CheckCondition
=(	identifier 
	((comparator Value) | (("IN"|"in") ValueList) |	("IS" ["NOT"|"not"] ("NULL"|"null") )) 
	[("OR" | "AND") CheckCondition]
 )	|
 ( '(' CheckCondition ')') 
.
ValueList
= '(' Value {',' Value} ')'
.
Value
= (['+'| '-'] number) | ('\''{ANY}'\'') | "NULL" | identifier
.
END ddl2cpp.