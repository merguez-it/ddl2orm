#include <iostream>
#include <fstream>
#include <assert.h>
#include "MappedTable.h"
#include "MappingUtils.h"
#include "ObjectModel.h"
#include  "cppClassTemplate.inc.h"

using namespace std;


COMPILER ddl2cpp

		ObjectModel *model;

/*--------------------------------------------------------------------------*/
// IGNORECASE si case sensitive, alors le parser ne sait pas distinguer date (identifier) de DATE (type). shit !

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzéàèçùô".
  digit = "0123456789".
  quote='\''.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  identifier  = ['"']letter {letter | digit | '_'}['"'].
  number = digit {digit}.
  comparator = ">=" | '>' | '<' | "<=" | '=' | "==".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf
COMMENTS FROM "--" TO lf

IGNORE cr + lf + tab

PRODUCTIONS
/*------------------------------------------------------------------------*/
ddl2cpp= {
   ("DROP"{ANY} ';') |	
   ("PRAGMA"{ANY} ';') |
   ("CREATE" ((["UNIQUE"] "INDEX" {ANY} ';') | ("TABLE" TableSpec)))
}
.	
TableSpec						
= 
(['"']identifier['"']				(. MappedTable mt; mt.tableName=trimQuotes(t->val);	.)
 '('
	TableItemSpec<mt> 
	{[','] TableItemSpec<mt>}
 ')'[';']							(. 	mt.className=camelize(mt.tableName); /*TODO: Injecter les règles de nommage des classes */	.)
                                    (.	assert(!mt.className.empty());			.)
									(.	model->tables[mt.className]=mt;			.)
)
.
TableItemSpec<MappedTable& mt>		(. wstring role; wstring typeDecl;			.)
=   (identifier						(. role=trimQuotes(t->val); /* TODO: Injecter les règles de nommage des champs */			.)		
	TypeSpec<typeDecl>								
	ValueSpec<role,mt>
	[CheckSpec]
     )								(. mt.members[role].roleName=role;   		.)
									(. mt.members[role].type=typeDecl;			.)
 | (("PRIMARY"|"primary")("KEY"|"key")'(' ['"']identifier['"']	(. mt.primaryKey=trimQuotes(t->val); /* TODO: Injecter les règles de nommage des PK */				.)
	{','['"']identifier['"']							(. mt.primaryKey=L""; /* ignore composite PK  */	.)
	}')' )						
| ("FOREIGN" "KEY" '(' ['"']identifier['"']	(. role=trimQuotes(t->val); wstring column=trimQuotes(t->val);			.)
									(. if (mt.members.count(column)!=0) mt.members.erase(column);	/* we don't keep xxxId, rather we model a xxx role*/		.)
									(. replaceAll(L"Id",L"",role);	/* TODO: injecter les règles de nommage des rôles */ .)
									(. mt.members[role].roleName=role;   		    .)
									(. mt.members[role].fkName=column;										.)
									(. mt.members[role].kind=TO_ONE;										.) 
	')' "REFERENCES" ['"']identifier['"']		(. mt.members[role].type=camelize(trimQuotes(t->val));					.)
   '(' ['"']identifier['"']					(. mt.fkToPk[column]=trimQuotes(t->val);								.)
	')'
   )											
.

TypeSpec<wstring &typeDecl> =				(. typeDecl=L"What_The_F_ck";	.)
	("BOOLEAN")								(. typeDecl=L"int";				.)
|	("INTEGER" | "INT" | "int")				(. typeDecl=L"int";				.)
|	("TINYINT"								(. typeDecl=L"int";				.)
	|"SMALLINT"								(. typeDecl=L"int";				.)
	)							
|	("TEXT"|"CHAR" '('number')' 
	 | ("VARCHAR"|"varchar")'('number')')	(. typeDecl=L"std::string";		.)
|	("DOUBLE"|"BIG" "DECIMAL"|
	 "DECIMAL"'('number [','number]')'					
	)										(. typeDecl=L"double";			.)
|	("DATE")								(. typeDecl=L"datetime";		.)
.

ValueSpec<const wstring& fieldName,MappedTable& mt>  
											(. mt.members[fieldName].kind=NULLABLE_DATA;	.) // Default is nulable
=[(("NOT"|"not") ("NULL"|"null"))			(. mt.members[fieldName].kind=DATA;	.)
 | ("NULL"|"null")]
 [ ("DEFAULT"|"default") Value]
.

CheckSpec
= "CHECK" '('
	CheckCondition
 ')'
.

CheckCondition
=(	['"']identifier['"'] 
	((comparator Value) | (("IN"|"in") ValueList) |	("IS" ["NOT"|"not"] ("NULL"|"null") )) 
	[("OR" | "AND") CheckCondition]
 )	|
 ( '(' CheckCondition ')') 
.

ValueList
= '(' Value {',' Value} ')'
.

Value
= (['+'| '-'] number) | ('\''{ANY}'\'') | "NULL" | identifier
.

END ddl2cpp.