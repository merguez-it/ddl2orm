/*
 *  cppClassTemplate.h
 *  ddl2orm
 *
 *  C++ class template as strings, intended to be populated
 *  with database fields and accessors, parsed from a DDL (SQLite) description.
 *
 *  Created by Mathias Franck on 02/03/12.
 *  Copyleft 2012 Merguez-IT. All rights reserved.
 *
 */

static const wstring interfacePrologue=L"\
/*\n\
*  $className.h\n\
*  \n\
*  C++ mapping generated by ddl2orm (written by Mathias Franck).\n\
*  Copyleft 2012 Merguez-it.\n\
*\n\
*/\n\n\
#ifndef $className_H\n\
#define $className_H\n\n\
#include \"lorm.h\"\n\n";

static const wstring interfaceClassPrologue=L"\n\
class $className : public table<$className> { \n\
public: \n\
  TABLE_INIT($className,$tableName)\n";

static const wstring interfaceEpilogue=L"\
};\n\
#endif";


static const wstring implementationPrologue=L"\
/*\n\
*  $className.cpp\n\
*  \n\
*  C++ mapping generated by ddl2orm (written by Mathias Franck).\n\
*  Copyleft 2012 Merguez-it.\n\
*\n\
*/\n\n\
#include \"$className.h\"\n\n";

static const wstring registerTemplate= L"REGISTER_TABLE($className) {\n\tidentity(\"$id\",$className::id);\n$fieldsImpl\n};\n";
static const wstring fieldTemplate = L"\tfield(\"$fieldName\", &$className::$roleName);\n";
static const wstring has_oneTemplate = L"\thas_one(\"$fkName\", &$className::$roleName);\n";
static const wstring has_manyTemplate = L"\thas_many($className,$targetClassName,$roleName,$inverseRoleName);\n";
static const wstring hmbtTemplate = L"\thas_and_belongs_to_many($className,$targetClassName,$roleName,\"$linkTable\",\"$sourceFK\",\"$targetFK\");\n";